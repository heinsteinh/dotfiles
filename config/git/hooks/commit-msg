#!/bin/sh
# Commit message hook for git repositories
# This script validates commit messages according to conventional commits format

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

commit_regex='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{1,50}'

error_msg="
${RED}Invalid commit message format!${NC}

Valid format: <type>(<scope>): <subject>

Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert
Scope: Optional, can be anything specifying the place of the commit change
Subject: Brief description, no more than 50 characters

Examples:
  feat(auth): add login functionality
  fix: resolve memory leak in parser
  docs(readme): update installation instructions
  test(api): add unit tests for user service
"

if ! grep -qE "$commit_regex" "$1"; then
    echo "$error_msg"
    echo "${YELLOW}Your commit message:${NC}"
    cat "$1"
    echo ""
    exit 1
fi

# Check for imperative mood (simple heuristic)
subject=$(grep -E "$commit_regex" "$1" | sed 's/^[^:]*: //')
first_word=$(echo "$subject" | cut -d' ' -f1)

case "$first_word" in
    added|fixed|changed|updated|removed|deleted|created|implemented)
        echo "${YELLOW}Warning: Consider using imperative mood (e.g., 'add' instead of 'added')${NC}"
        ;;
esac

echo "${GREEN}Commit message format is valid!${NC}"
exit 0
