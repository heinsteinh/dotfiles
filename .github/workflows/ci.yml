name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

# Add permissions for security scanning
permissions:
  contents: write
  security-events: write
  actions: read

env:
  CI: true
  DOTFILES_CI_MODE: true

jobs:
  lint:
    name: Lint Scripts
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js for additional linting
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install linting tools
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        npm install -g markdownlint-cli

    - name: Lint shell scripts
      run: |
        echo "Linting shell scripts..."
        find . -name "*.sh" -type f -not -path "./.git/*" -exec shellcheck -x {} \;

    - name: Lint Markdown files
      run: |
        echo "Linting Markdown files..."
        markdownlint README.md docs/ || true

    - name: Check script permissions
      run: |
        echo "Checking script permissions..."
        find scripts/ tools/ -name "*.sh" -type f -not -executable -exec echo "Non-executable script: {}" \;

  test-ubuntu:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        ubuntu-version: [22.04, 24.04]

    container:
      image: ubuntu:${{ matrix.ubuntu-version }}

    steps:
    - name: Install Git and basic tools
      run: |
        apt-get update
        apt-get install -y git curl sudo

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create test user
      run: |
        useradd -m -s /bin/bash testuser
        echo 'testuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

    - name: Run Ubuntu setup
      shell: bash
      run: |
        sudo -u testuser bash -c "cd /home/testuser && cp -r $GITHUB_WORKSPACE/. ."
        sudo -u testuser bash -c "cd /home/testuser && chmod +x scripts/setup/setup-ubuntu.sh"
        sudo -u testuser env CI=true DOTFILES_CI_MODE=true bash -c "cd /home/testuser && ./scripts/setup/setup-ubuntu.sh" || true

    #- name: Run installation tests
    #  shell: bash
    #  run: |
    #    sudo -u testuser bash -c "cd /home/testuser && chmod +x tests/test-installation.sh"
    #    sudo -u testuser bash -c "cd /home/testuser && env CI=true DOTFILES_SKIP_INTERACTIVE=true ./tests/test-installation.sh --skip-interactive --verbose"

  test-macos:
    name: Test on macOS
    runs-on: ${{ matrix.macos-version }}
    needs: lint

    strategy:
      matrix:
        macos-version: [macos-14]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup macOS environment
      run: |
        # Ensure Homebrew is in PATH
        echo "/opt/homebrew/bin:/usr/local/bin" >> $GITHUB_PATH

    - name: Run macOS setup (minimal)
      run: |
        chmod +x scripts/setup/setup-macos.sh
        ./scripts/setup/setup-macos.sh || true

    - name: Run installation tests
      run: |
        chmod +x tests/test-installation.sh
        env CI=true DOTFILES_SKIP_INTERACTIVE=true ./tests/test-installation.sh --skip-interactive --verbose

  test-fedora:
    name: Test on Fedora
    runs-on: ubuntu-latest
    needs: lint

    container:
      image: fedora:latest

    steps:
    - name: Install Git and basic tools
      run: |
        dnf update -y
        dnf install -y git curl sudo which flatpak

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create test user
      run: |
        useradd -m -s /bin/bash testuser
        echo 'testuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

    - name: Run Fedora setup
      run: |
        sudo -u testuser bash -c "cd /home/testuser && cp -r $GITHUB_WORKSPACE/. ."
        sudo -u testuser bash -c "cd /home/testuser && chmod +x scripts/setup/setup-fedora.sh"
        sudo -u testuser env CI=true DOTFILES_CI_MODE=true bash -c "cd /home/testuser && timeout 900 ./scripts/setup/setup-fedora.sh --minimal" || true

    #- name: Run installation tests
    #  run: |
    #    sudo -u testuser bash -c "cd /home/testuser && chmod +x tests/test-installation.sh"
    #    sudo -u testuser bash -c "cd /home/testuser && env CI=true DOTFILES_SKIP_INTERACTIVE=true ./tests/test-installation.sh --skip-interactive --verbose"

  test-arch:
    name: Test on Arch Linux
    runs-on: ubuntu-latest
    needs: lint

    container:
      image: archlinux:latest

    steps:
    - name: Install Git and basic tools
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm git curl sudo which base-devel

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create test user
      run: |
        useradd -m -s /bin/bash testuser
        echo 'testuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

    - name: Run Arch setup
      run: |
        sudo -u testuser bash -c "cd /home/testuser && cp -r $GITHUB_WORKSPACE/. ."
        sudo -u testuser bash -c "cd /home/testuser && chmod +x scripts/setup/setup-arch.sh scripts/debug/test-ci-detection.sh"
        sudo -u testuser env CI=true DOTFILES_CI_MODE=true bash -c "cd /home/testuser && echo '=== Pre-setup CI test ===' && ./scripts/debug/test-ci-detection.sh"
        sudo -u testuser env CI=true DOTFILES_CI_MODE=true bash -c "cd /home/testuser && timeout 900 ./scripts/setup/setup-arch.sh --minimal" || true

    #- name: Run installation tests
    #  run: |
    #    sudo -u testuser bash -c "cd /home/testuser && chmod +x tests/test-installation.sh"
    #    sudo -u testuser bash -c "cd /home/testuser && env CI=true DOTFILES_SKIP_INTERACTIVE=true ./tests/test-installation.sh --skip-interactive --verbose"

  test-minimal-install:
    name: Test Minimal Installation
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install minimal dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl zsh vim tmux

    - name: Run minimal installation
      run: |
        chmod +x tools/workflows/new-machine.sh
        export TERM=xterm-256color
        export DOTFILES_SKIP_INTERACTIVE=true
        export MACHINE_NAME="ci-test-machine"
        export USER_NAME="testuser"
        export USER_EMAIL="test@example.com"
        export INSTALL_TYPE="minimal"
        ./tools/workflows/new-machine.sh || true

    #- name: Test minimal installation
    #  run: |
    #    chmod +x tests/test-installation.sh
    #    env CI=true DOTFILES_SKIP_INTERACTIVE=true ./tests/test-installation.sh --skip-interactive --verbose

  test-full-install:
    name: Test Full Installation
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run full installation
      run: |
        chmod +x install.sh
        ./install.sh || true

    # - name: Test full installation
    #   run: |
    #     chmod +x tests/test-installation.sh
    #     env CI=true DOTFILES_SKIP_INTERACTIVE=true ./tests/test-installation.sh --skip-interactive --verbose

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for secret scanning

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Run Trivy secret scanning
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        scanners: 'secret'
        format: 'sarif'
        output: 'trivy-secrets.sarif'

    - name: Check GitHub Advanced Security availability
      id: check_security
      continue-on-error: true
      run: |
        echo "Checking if GitHub Advanced Security is available..."

        # Try to check repository security settings via GitHub API
        REPO_SECURITY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}" | \
          jq -r '.security_and_analysis.advanced_security.status // "disabled"')

        echo "Advanced Security status: $REPO_SECURITY"

        if [[ "$REPO_SECURITY" == "enabled" ]]; then
          echo "✅ GitHub Advanced Security is enabled - SARIF uploads will be attempted"
          echo "upload_sarif=true" >> $GITHUB_OUTPUT
        else
          echo "ℹ️ GitHub Advanced Security is not available - skipping SARIF uploads"
          echo "📁 Security results will be available as workflow artifacts instead"
          echo "upload_sarif=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-vulnerabilities'

    - name: Upload Trivy secret scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-secrets.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'trivy-secrets.sarif'
        category: 'trivy-secrets'

    - name: Generate security summary (fallback)
      if: always()
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check Trivy vulnerability results
        if [[ -f trivy-results.sarif ]]; then
          VULN_COUNT=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
          echo "### 🛡️ Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
          echo "- **Issues found**: $VULN_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        # Check Trivy secret results
        if [[ -f trivy-secrets.sarif ]]; then
          SECRET_COUNT=$(jq '.runs[0].results | length' trivy-secrets.sarif 2>/dev/null || echo "0")
          echo "### 🔐 Secret Scan" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets found**: $SECRET_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        # Check GitLeaks results
        if [[ -f gitleaks-report.sarif ]]; then
          GITLEAKS_COUNT=$(jq '.runs[0].results | length' gitleaks-report.sarif 2>/dev/null || echo "0")
          echo "### 🔍 GitLeaks Scan" >> $GITHUB_STEP_SUMMARY
          echo "- **Git secrets found**: $GITLEAKS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        echo "### 📋 Available Reports" >> $GITHUB_STEP_SUMMARY
        echo "Security scan results are available as workflow artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- Download the \`security-scan-results\` artifact for detailed reports" >> $GITHUB_STEP_SUMMARY
        echo "- SARIF files can be manually uploaded to GitHub Security tab if needed" >> $GITHUB_STEP_SUMMARY
        # Add note about SARIF upload limitations
        echo "### ℹ️ GitHub Security Integration" >> $GITHUB_STEP_SUMMARY

        # Check if Advanced Security is available by looking at upload results
        UPLOAD_STATUS="${{ steps.check_security.outputs.upload_sarif }}"
        if [[ "$UPLOAD_STATUS" == "true" ]]; then
          echo "✅ SARIF files were uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ SARIF uploads may not be available (requires GitHub Advanced Security)" >> $GITHUB_STEP_SUMMARY
          echo "📋 All detailed results are available in workflow artifacts below" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 **All scan results are preserved as artifacts for manual review**" >> $GITHUB_STEP_SUMMARY

  password-leak-check:
    name: Password & Secrets Leak Check
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for comprehensive scanning

    - name: Install GitLeaks
      run: |
        # Get the latest GitLeaks version dynamically
        GITLEAKS_VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep '"tag_name"' | sed 's/.*"tag_name": "v\([^"]*\)".*/\1/')
        echo "Installing GitLeaks version: $GITLEAKS_VERSION"
        wget "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
        tar -xzf "gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
        sudo mv gitleaks /usr/local/bin/
        gitleaks version
    - name: Run GitLeaks secret detection
      run: |
        echo "Running GitLeaks to detect secrets in repository..."
        gitleaks detect --source . --report-format sarif --report-path gitleaks-report.sarif --verbose || true

    - name: Run GitLeaks on commit history
      run: |
        echo "Scanning git history for secrets..."
        gitleaks detect --source . --log-opts="--all" --report-format json --report-path gitleaks-history.json --verbose || true

    - name: Install TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

    - name: Run TruffleHog secret scanning
      run: |
        echo "Running TruffleHog to detect additional secrets..."
        trufflehog git file://. --json --no-update > trufflehog-results.json || true

    - name: Install detect-secrets
      run: |
        pip install detect-secrets

    - name: Run detect-secrets baseline scan
      run: |
        echo "Running detect-secrets baseline scan..."
        detect-secrets scan --all-files --disable-plugin AbsolutePathDetectorPlugin > .secrets.baseline || true

    - name: Run detect-secrets audit
      run: |
        echo "Auditing secrets with detect-secrets..."
        detect-secrets audit .secrets.baseline || true

    - name: Custom password pattern detection
      run: |
        echo "Running custom password pattern detection..."

        # Create custom pattern file for common password patterns
        cat > password_patterns.txt << 'EOF'
        password\s*[:=]\s*['""][^'""]{8,}['""]
        pwd\s*[:=]\s*['""][^'""]{8,}['""]
        pass\s*[:=]\s*['""][^'""]{8,}['""]
        secret\s*[:=]\s*['""][^'""]{8,}['""]
        key\s*[:=]\s*['""][^'""]{8,}['""]
        token\s*[:=]\s*['""][^'""]{20,}['""]
        api[_-]?key\s*[:=]\s*['""][^'""]{20,}['""]
        auth[_-]?token\s*[:=]\s*['""][^'""]{20,}['""]
        access[_-]?token\s*[:=]\s*['""][^'""]{20,}['""]
        bearer\s+[a-zA-Z0-9_-]{20,}
        ssh-rsa\s+[A-Za-z0-9+/]{200,}
        ssh-ed25519\s+[A-Za-z0-9+/]{68}
        -----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----
        AWS_SECRET_ACCESS_KEY
        GITHUB_TOKEN
        SLACK_TOKEN
        OPENAI_API_KEY
        DATABASE_URL\s*[:=]\s*['""]?[^'"\s]+://[^'"\s]+['""]?
        EOF

        # Search for patterns in all text files
        echo "Checking for password patterns..."
        grep -rE -f password_patterns.txt . \
          --exclude-dir=.git \
          --exclude-dir=node_modules \
          --exclude-dir=.github \
          --exclude="*.log" \
          --exclude="*.sarif" \
          --exclude="*.json" \
          --exclude="password_patterns.txt" \
          --exclude="ci.yml" \
          || echo "No password patterns found"

    - name: Check for hardcoded credentials in config files
      run: |
        echo "Checking configuration files for hardcoded credentials..."

        # Check common config file patterns
        find . -type f \( -name "*.conf" -o -name "*.config" -o -name "*.cfg" -o -name "*.ini" \) \
          -not -path "./.git/*" \
          -exec grep -l -i -E "(password|secret|key|token|credential)" {} \; | while read file; do
            echo "Warning: Potential credentials in config file: $file"
            grep -n -i -E "(password|secret|key|token|credential)" "$file" || true
          done

    - name: Check SSH keys and certificates
      run: |
        echo "Checking for SSH keys and certificates..."

        # Check for private keys
        find . -type f \( -name "*_rsa" -o -name "*_dsa" -o -name "*_ecdsa" -o -name "*_ed25519" \) \
          -not -path "./.git/*" \
          -not -name "*.pub" | while read file; do
            echo "Warning: Private key found: $file"
            head -n 1 "$file"
          done

        # Check for certificate files
        find . -type f \( -name "*.pem" -o -name "*.key" -o -name "*.p12" -o -name "*.pfx" \) \
          -not -path "./.git/*" | while read file; do
            echo "Warning: Certificate/Key file found: $file"
            file "$file"
          done

    - name: Check environment files
      run: |
        echo "Checking environment files for secrets..."

        find . -type f \( -name ".env*" -o -name "*.env" \) \
          -not -path "./.git/*" | while read file; do
            echo "Checking environment file: $file"
            if [[ -s "$file" ]]; then
              echo "Warning: Environment file contains data: $file"
              # Don't cat the file contents for security
              wc -l "$file"
            fi
          done

    - name: Generate comprehensive security report
      run: |
        echo "Generating comprehensive security report..."

        cat > security-report.md << 'EOF'
        # Security Scan Report

        ## Summary
        This report contains the results of multiple security scanning tools:

        ### Tools Used
        - GitLeaks: Git repository secret scanning
        - TruffleHog: Advanced secret detection
        - detect-secrets: Baseline secret detection
        - Trivy: Vulnerability and secret scanning
        - Custom patterns: Dotfiles-specific checks

        ### Scan Results
        EOF

        # Add GitLeaks results
        if [[ -f gitleaks-report.sarif ]]; then
          echo "- GitLeaks: $(jq '.runs[0].results | length' gitleaks-report.sarif 2>/dev/null || echo "0") issues found"
        fi

        # Add file counts
        echo "
        ### File Analysis
        - Configuration files scanned: $(find . -name "*.conf" -o -name "*.config" -o -name "*.cfg" | wc -l)
        - Environment files found: $(find . -name ".env*" -o -name "*.env" | wc -l)
        - Shell scripts analyzed: $(find . -name "*.sh" | wc -l)
        " >> security-report.md

    - name: Upload GitLeaks SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('gitleaks-report.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'gitleaks-report.sarif'
        category: 'gitleaks-secrets'

    - name: Display security scan results
      if: always()
      run: |
        echo "=== SECURITY SCAN RESULTS ==="
        echo ""

        # Show Trivy vulnerability results
        if [[ -f trivy-results.sarif ]]; then
          echo "🛡️ Trivy Vulnerability Scan:"
          VULN_COUNT=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
          echo "   Found $VULN_COUNT potential vulnerabilities"
          if [[ "$VULN_COUNT" != "0" ]]; then
            echo "   ⚠️ Review trivy-results.sarif for details"
          fi
          echo ""
        fi

        # Show Trivy secret results
        if [[ -f trivy-secrets.sarif ]]; then
          echo "🔐 Trivy Secret Scan:"
          SECRET_COUNT=$(jq '.runs[0].results | length' trivy-secrets.sarif 2>/dev/null || echo "0")
          echo "   Found $SECRET_COUNT potential secrets"
          if [[ "$SECRET_COUNT" != "0" ]]; then
            echo "   ⚠️ Review trivy-secrets.sarif for details"
          fi
          echo ""
        fi

        # Show GitLeaks results
        if [[ -f gitleaks-report.sarif ]]; then
          echo "🔍 GitLeaks Scan:"
          GITLEAKS_COUNT=$(jq '.runs[0].results | length' gitleaks-report.sarif 2>/dev/null || echo "0")
          echo "   Found $GITLEAKS_COUNT potential git secrets"
          if [[ "$GITLEAKS_COUNT" != "0" ]]; then
            echo "   ⚠️ Review gitleaks-report.sarif for details"
          fi
          echo ""
        fi

        # Show TruffleHog results if available
        if [[ -f trufflehog-results.json ]]; then
          echo "🐷 TruffleHog Scan:"
          TRUFFLE_COUNT=$(jq '. | length' trufflehog-results.json 2>/dev/null || echo "0")
          echo "   Found $TRUFFLE_COUNT potential secrets"
          if [[ "$TRUFFLE_COUNT" != "0" ]]; then
            echo "   ⚠️ Review trufflehog-results.json for details"
          fi
          echo ""
        fi

        echo "📁 All results saved as artifacts for detailed review"
        echo "================================="

    - name: Archive security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          gitleaks-report.sarif
          gitleaks-history.json
          trufflehog-results.json
          .secrets.baseline
          security-report.md
        retention-days: 30

    - name: Comment on PR with security results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let comment = '## 🔒 Security Scan Results\n\n';

          // Check if any security issues were found
          const hasGitleaksResults = fs.existsSync('gitleaks-report.sarif');
          const hasTruffleHogResults = fs.existsSync('trufflehog-results.json');

          if (hasGitleaksResults || hasTruffleHogResults) {
            comment += '⚠️ **Security scan completed. Please review the artifacts for detailed results.**\n\n';
            comment += '### Scanned with:\n';
            comment += '- GitLeaks (secrets in git history)\n';
            comment += '- TruffleHog (advanced secret detection)\n';
            comment += '- detect-secrets (baseline scanning)\n';
            comment += '- Custom password patterns\n';
            comment += '- Configuration file analysis\n\n';
            comment += 'Download the security scan artifacts from this workflow run for detailed results.';
          } else {
            comment += '✅ **No obvious security issues detected.**\n\n';
            comment += 'All security scans completed successfully.';
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  cross-platform-compatibility:
    name: Cross-Platform Compatibility
    runs-on: ${{ matrix.os }}
    needs: lint

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test script syntax (Unix)
      if: runner.os != 'Windows'
      run: |
        find scripts/ tools/ -name "*.sh" -type f -exec bash -n {} \;

    - name: Test script syntax (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        find scripts/ tools/ -name "*.sh" -type f -exec bash -n {} \; || true

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check README completeness
      run: |
        echo "Checking README.md completeness..."
        grep -q "Installation" README.md || echo "Missing Installation section"
        grep -q "Usage" README.md || echo "Missing Usage section"
        grep -q "Features" README.md || echo "Missing Features section"

    - name: Check for broken links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test-ubuntu, test-macos]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y time zsh

    - name: Measure shell startup time
      run: |
        echo "Measuring shell startup performance..."
        chmod +x scripts/setup/setup-ubuntu.sh
        ./scripts/setup/setup-ubuntu.sh || true

        # Measure zsh startup time
        for i in {1..5}; do
          /usr/bin/time -f "Run $i: %e seconds" zsh -c 'exit' 2>&1 || true
        done

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test-ubuntu, test-macos, test-fedora, test-arch, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          Automated release of dotfiles

          ## Changes
          - Tested on Ubuntu, macOS, Fedora, and Arch Linux
          - Security scanned
          - All tests passing

        draft: false
        prerelease: false

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [release]
    if: always()

    steps:
    - name: Cleanup old releases
      uses: dev-drprasad/delete-older-releases@v0.3.3
      with:
        keep_latest: 5
        delete_tag_pattern: "^v"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
